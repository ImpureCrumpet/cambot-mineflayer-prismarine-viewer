### Archived from README: 2.1 Where files are stored on your Mac

- Project files: wherever you run `git clone` (for example `~/Projects/mineflayer_camerabot`).
- Dependencies: installed into the projectâ€™s local `node_modules` directory (no global installs required).
- Credentials: stored in the macOS Keychain (not in your project folder). The bot reads the item `MineflayerBot` / `bot-email` via Keytar.
- Nothing else is written outside your project directory or Keychain.

---

### Archived from README: 5. Behavior: Teleport-based filming (default)

- On spawn, the bot probes whether it can use `/tp`.
- If teleport is permitted, it builds a roster of online players (excluding itself) and cycles through them:
  - Teleports to a player, locks the camera on them, films for a dwell period, then advances to the next.
  - If the filmed player disconnects mid-shot, it immediately refreshes the roster and continues.
  - If the roster is empty, it waits and polls periodically until someone joins.
- If teleport is not permitted, the bot prints and chats: "cambot can't teleport" and idles.

Timing and behavior are configurable via environment variables.

Notes:
- Default client `viewDistance` is 6 chunks. Increase if you want wider surroundings while filming: `CAMBOT_VIEW_DISTANCE=8`.
- Existing camera modes (look_at, wide, circle, etc.) still apply while filming.

---

### Archived from README: 6. Client machine notes

- Ensure Node 18+ is installed (e.g., via `nvm` or installer).
- Keep the server and bot on the same LAN for lower latency.
- Expose port `3007` on the client if viewing from other devices (not recommended)

Viewer prerequisites (handled by setup):

- On macOS, `scripts/setup-macos.sh` installs native libraries and the `canvas` package used by Prismarine Viewer.
- If you skip the setup script, install via Homebrew: `brew install pkg-config cairo pango libpng jpeg giflib librsvg`, then `npm install canvas`.

---
### ## 6. Camera Control via Chat Commands

The bot's camera behavior can be configured in real-time using chat commands. All commands start with `cam`.

**Usage**: `cam <setting> <value>`

---
#### **Targeting Settings**

* **`entitySearchRadius`**: Sets how far from players to look for entities (in blocks).
    * `cam entitySearchRadius 150`

* **`includeHostileMobs`**: Whether to include hostile mobs as targets (`true` or `false`).
    * `cam includeHostileMobs false`

* **`targetMix`**: Sets the ratio of players to entities.
    * `players_only`: Only focuses on players.
    * `entities_only`: Only focuses on non-player entities.
    * `balanced`: A 1:1 ratio of players and entities.
    * `player_focused`: A 2:1 ratio, favoring players.
    * `cam targetMix player_focused`

---
#### **View Mode Settings**

* **`viewModeMix`**: Sets the active camera mode.
    * `random`: Cycles through all modes randomly.
    * `look_at`: Stays mostly still, looking at the target.
    * `ots`: An "over-the-shoulder" third-person view.
    * `circle`: Slowly circles the target.
    * `wide`: A wide-angle shot from a distance.
    * `cam viewModeMix circle`

* **`circleSpeed`**: How fast the bot circles the target (higher is faster).
    * `cam circleSpeed 0.2`

* **`overShoulderDistance`**: How far back the camera is for `ots` mode.
    * `cam overShoulderDistance 7`

---
#### **Timing Settings**

* **`switchInterval`**: How often the bot switches to a new target (in **minutes**).
    * `cam switchInterval 10` (switches every 10 minutes)
    * `cam switchInterval 0.5` (switches every 30 seconds)

    ### ## 7. Running Automated Tests

A simple test script is included to verify the bot's core functionality. This script will connect the bot to the server, run a series of checks, and then disconnect.

**To run the tests:**

```bash
node runTests.js
```

The script will check for the following:
1.  **Connection**: Can the bot successfully connect and spawn in the world?
2.  **Spectator Mode**: Is the bot correctly set to spectator mode?
3.  **Player Discovery**: Can the bot see other players on the server?

The results will be printed to the console in a summary table.